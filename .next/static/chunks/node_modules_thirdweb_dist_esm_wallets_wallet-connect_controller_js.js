"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_thirdweb_dist_esm_wallets_wallet-connect_controller_js"],{

/***/ "./node_modules/thirdweb/dist/esm/wallets/wallet-connect/controller.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/thirdweb/dist/esm/wallets/wallet-connect/controller.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   autoConnectWC: function() { return /* binding */ autoConnectWC; },\n/* harmony export */   connectWC: function() { return /* binding */ connectWC; },\n/* harmony export */   isWalletConnect: function() { return /* binding */ isWalletConnect; }\n/* harmony export */ });\n/* harmony import */ var viem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! viem */ \"./node_modules/viem/_esm/index.js\");\n/* harmony import */ var _analytics_track_transaction_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../analytics/track/transaction.js */ \"./node_modules/thirdweb/dist/esm/analytics/track/transaction.js\");\n/* harmony import */ var _chains_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../chains/utils.js */ \"./node_modules/thirdweb/dist/esm/chains/utils.js\");\n/* harmony import */ var _utils_address_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../utils/address.js */ \"./node_modules/thirdweb/dist/esm/utils/address.js\");\n/* harmony import */ var _utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/encoding/hex.js */ \"./node_modules/thirdweb/dist/esm/utils/encoding/hex.js\");\n/* harmony import */ var _utils_json_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../utils/json.js */ \"./node_modules/thirdweb/dist/esm/utils/json.js\");\n/* harmony import */ var _utils_signatures_helpers_parse_typed_data_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../utils/signatures/helpers/parse-typed-data.js */ \"./node_modules/thirdweb/dist/esm/utils/signatures/helpers/parse-typed-data.js\");\n/* harmony import */ var _utils_storage_walletStorage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/storage/walletStorage.js */ \"./node_modules/thirdweb/dist/esm/utils/storage/walletStorage.js\");\n/* harmony import */ var _utils_url_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/url.js */ \"./node_modules/thirdweb/dist/esm/utils/url.js\");\n/* harmony import */ var _generated_getWalletInfo_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../__generated__/getWalletInfo.js */ \"./node_modules/thirdweb/dist/esm/wallets/__generated__/getWalletInfo.js\");\n/* harmony import */ var _utils_defaultDappMetadata_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/defaultDappMetadata.js */ \"./node_modules/thirdweb/dist/esm/wallets/utils/defaultDappMetadata.js\");\n/* harmony import */ var _utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/normalizeChainId.js */ \"./node_modules/thirdweb/dist/esm/wallets/utils/normalizeChainId.js\");\n/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./constants.js */ \"./node_modules/thirdweb/dist/esm/wallets/wallet-connect/constants.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet cachedProvider = null;\nconst storageKeys = {\n    lastUsedChainId: \"tw.wc.lastUsedChainId\",\n    requestedChains: \"tw.wc.requestedChains\",\n};\n/**\n * Checks if the provided wallet is a Wallet Connect wallet.\n *\n * @param wallet - The wallet to check.\n * @returns True if the wallet is a Wallet Connect wallet, false otherwise.\n */\nfunction isWalletConnect(wallet) {\n    return wallet.id === \"walletConnect\";\n}\n/**\n * @internal\n */\nasync function connectWC(options, emitter, walletId, storage, sessionHandler) {\n    const provider = await initProvider(options, walletId, sessionHandler);\n    const wcOptions = options.walletConnect;\n    let { onDisplayUri } = wcOptions || {};\n    const walletInfo = await (0,_generated_getWalletInfo_js__WEBPACK_IMPORTED_MODULE_0__.getWalletInfo)(walletId);\n    // use default sessionHandler unless onDisplayUri is explicitly provided\n    if (!onDisplayUri && sessionHandler) {\n        const deeplinkHandler = (uri) => {\n            const appUrl = walletInfo.mobile.native || walletInfo.mobile.universal;\n            if (!appUrl) {\n                // generic wc uri\n                sessionHandler(uri);\n                return;\n            }\n            const fullUrl = (0,_utils_url_js__WEBPACK_IMPORTED_MODULE_1__.formatWalletConnectUrl)(appUrl, uri).redirect;\n            sessionHandler(fullUrl);\n        };\n        onDisplayUri = deeplinkHandler;\n    }\n    if (onDisplayUri) {\n        provider.events.addListener(\"display_uri\", onDisplayUri);\n    }\n    let optionalChains = wcOptions?.optionalChains;\n    let chainToRequest = options.chain;\n    // ignore the given options chains - and set the safe supported chains\n    if (walletId === \"global.safe\") {\n        optionalChains = chainsToRequestForSafe.map(_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain);\n        if (chainToRequest && !optionalChains.includes(chainToRequest)) {\n            chainToRequest = undefined;\n        }\n    }\n    // For UniversalProvider, we still need chain configuration for session management\n    const { chains: chainsToRequest, rpcMap } = getChainsToRequest({\n        chain: chainToRequest,\n        client: options.client,\n        optionalChains: optionalChains,\n    });\n    // For UniversalProvider, we need to connect with namespaces\n    await provider.connect({\n        ...(wcOptions?.pairingTopic\n            ? { pairingTopic: wcOptions?.pairingTopic }\n            : {}),\n        namespaces: {\n            [_constants_js__WEBPACK_IMPORTED_MODULE_3__.NAMESPACE]: {\n                chains: chainsToRequest,\n                events: [\"chainChanged\", \"accountsChanged\"],\n                methods: [\n                    \"eth_sendTransaction\",\n                    \"eth_signTransaction\",\n                    \"eth_sign\",\n                    \"personal_sign\",\n                    \"eth_signTypedData\",\n                    \"wallet_switchEthereumChain\",\n                    \"wallet_addEthereumChain\",\n                ],\n                rpcMap,\n            },\n        },\n    });\n    setRequestedChainsIds(chainsToRequest.map((x) => Number(x.split(\":\")[1])), storage);\n    const currentChainId = chainsToRequest[0]?.split(\":\")[1] || 1;\n    const providerChainId = (0,_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_4__.normalizeChainId)(currentChainId);\n    const accounts = await provider.request({\n        method: \"eth_requestAccounts\",\n        params: [],\n    }, `eip155:${providerChainId}`);\n    const address = accounts[0];\n    if (!address) {\n        throw new Error(\"No accounts found on provider.\");\n    }\n    const chain = options.chain && options.chain.id === providerChainId\n        ? options.chain\n        : (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain)(providerChainId);\n    if (options) {\n        const savedParams = {\n            chain: options.chain,\n            optionalChains: options.walletConnect?.optionalChains,\n            pairingTopic: options.walletConnect?.pairingTopic,\n        };\n        if (storage) {\n            (0,_utils_storage_walletStorage_js__WEBPACK_IMPORTED_MODULE_5__.saveConnectParamsToStorage)(storage, walletId, savedParams);\n        }\n    }\n    if (wcOptions?.onDisplayUri) {\n        provider.events.removeListener(\"display_uri\", wcOptions.onDisplayUri);\n    }\n    return onConnect(address, chain, provider, emitter, storage, options.client, walletInfo, sessionHandler);\n}\n/**\n * Auto connect to already connected wallet connect session.\n * @internal\n */\nasync function autoConnectWC(options, emitter, walletId, storage, sessionHandler) {\n    const savedConnectParams = storage\n        ? await (0,_utils_storage_walletStorage_js__WEBPACK_IMPORTED_MODULE_5__.getSavedConnectParamsFromStorage)(storage, walletId)\n        : null;\n    const walletInfo = await (0,_generated_getWalletInfo_js__WEBPACK_IMPORTED_MODULE_0__.getWalletInfo)(walletId);\n    const provider = await initProvider(savedConnectParams\n        ? {\n            chain: savedConnectParams.chain,\n            client: options.client,\n            walletConnect: {\n                optionalChains: savedConnectParams.optionalChains,\n                pairingTopic: savedConnectParams.pairingTopic,\n            },\n        }\n        : {\n            client: options.client,\n            walletConnect: {},\n        }, walletId, sessionHandler);\n    if (!provider.session) {\n        await provider.disconnect();\n        throw new Error(\"No wallet connect session found on provider.\");\n    }\n    // For UniversalProvider, get accounts from enable() method\n    const namespaceAccounts = provider.session?.namespaces?.[_constants_js__WEBPACK_IMPORTED_MODULE_3__.NAMESPACE]?.accounts;\n    const address = namespaceAccounts?.[0]?.split(\":\")[2];\n    if (!address) {\n        throw new Error(\"No accounts found on provider.\");\n    }\n    // For UniversalProvider, get chainId from the session namespaces or use default\n    const currentChainId = options.chain?.id || 1;\n    const providerChainId = (0,_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_4__.normalizeChainId)(currentChainId);\n    const chain = options.chain && options.chain.id === providerChainId\n        ? options.chain\n        : (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain)(providerChainId);\n    return onConnect(address, chain, provider, emitter, storage, options.client, walletInfo, sessionHandler);\n}\n// Connection utils -----------------------------------------------------------------------------------------------\nasync function initProvider(options, walletId, sessionRequestHandler) {\n    if (cachedProvider) {\n        return cachedProvider;\n    }\n    const walletInfo = await (0,_generated_getWalletInfo_js__WEBPACK_IMPORTED_MODULE_0__.getWalletInfo)(walletId);\n    const wcOptions = options.walletConnect;\n    const { UniversalProvider } = await __webpack_require__.e(/*! import() */ \"node_modules_walletconnect_universal-provider_dist_index_es_js\").then(__webpack_require__.bind(__webpack_require__, /*! @walletconnect/universal-provider */ \"./node_modules/@walletconnect/universal-provider/dist/index.es.js\"));\n    let optionalChains = wcOptions?.optionalChains;\n    let chainToRequest = options.chain;\n    // ignore the given options chains - and set the safe supported chains\n    if (walletId === \"global.safe\") {\n        optionalChains = chainsToRequestForSafe.map(_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain);\n        if (chainToRequest && !optionalChains.includes(chainToRequest)) {\n            chainToRequest = undefined;\n        }\n    }\n    const provider = await UniversalProvider.init({\n        metadata: {\n            description: wcOptions?.appMetadata?.description ||\n                (0,_utils_defaultDappMetadata_js__WEBPACK_IMPORTED_MODULE_6__.getDefaultAppMetadata)().description,\n            icons: [\n                wcOptions?.appMetadata?.logoUrl || (0,_utils_defaultDappMetadata_js__WEBPACK_IMPORTED_MODULE_6__.getDefaultAppMetadata)().logoUrl,\n            ],\n            name: wcOptions?.appMetadata?.name || (0,_utils_defaultDappMetadata_js__WEBPACK_IMPORTED_MODULE_6__.getDefaultAppMetadata)().name,\n            url: wcOptions?.appMetadata?.url || (0,_utils_defaultDappMetadata_js__WEBPACK_IMPORTED_MODULE_6__.getDefaultAppMetadata)().url,\n            redirect: {\n                native: walletInfo.mobile.native || undefined,\n                universal: walletInfo.mobile.universal || undefined,\n            },\n        },\n        projectId: wcOptions?.projectId || _constants_js__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_PROJECT_ID,\n    });\n    provider.events.setMaxListeners(Number.POSITIVE_INFINITY);\n    if (walletId !== \"walletConnect\") {\n        async function handleSessionRequest() {\n            const walletLinkToOpen = provider.session?.peer?.metadata?.redirect?.native ||\n                walletInfo.mobile.native ||\n                walletInfo.mobile.universal;\n            if (sessionRequestHandler && walletLinkToOpen) {\n                // TODO: propagate error when this fails\n                await sessionRequestHandler(walletLinkToOpen);\n            }\n        }\n        // For UniversalProvider, use different event handling\n        provider.on(\"session_request_sent\", handleSessionRequest);\n        provider.events.addListener(\"disconnect\", () => {\n            provider.off(\"session_request_sent\", handleSessionRequest);\n            cachedProvider = null;\n        });\n    }\n    cachedProvider = provider;\n    return provider;\n}\nfunction createAccount({ provider, address, client, chain, sessionRequestHandler, walletInfo, }) {\n    const account = {\n        address: (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_7__.getAddress)(address),\n        async sendTransaction(tx) {\n            const transactionHash = (await requestAndOpenWallet({\n                provider,\n                payload: {\n                    method: \"eth_sendTransaction\",\n                    params: [\n                        {\n                            data: tx.data,\n                            from: (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_7__.getAddress)(address),\n                            gas: tx.gas ? (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_8__.numberToHex)(tx.gas) : undefined,\n                            to: tx.to,\n                            value: tx.value ? (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_8__.numberToHex)(tx.value) : undefined,\n                        },\n                    ],\n                },\n                chain: `eip155:${tx.chainId}`,\n                walletInfo,\n                sessionRequestHandler,\n            }));\n            (0,_analytics_track_transaction_js__WEBPACK_IMPORTED_MODULE_9__.trackTransaction)({\n                chainId: tx.chainId,\n                client: client,\n                contractAddress: tx.to ?? undefined,\n                gasPrice: tx.gasPrice,\n                transactionHash,\n                walletAddress: (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_7__.getAddress)(address),\n                walletType: \"walletConnect\",\n            });\n            return {\n                transactionHash,\n            };\n        },\n        async signMessage({ message }) {\n            const messageToSign = (() => {\n                if (typeof message === \"string\") {\n                    return (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_8__.stringToHex)(message);\n                }\n                if (message.raw instanceof Uint8Array) {\n                    return (0,_utils_encoding_hex_js__WEBPACK_IMPORTED_MODULE_8__.uint8ArrayToHex)(message.raw);\n                }\n                return message.raw;\n            })();\n            return requestAndOpenWallet({\n                provider,\n                payload: {\n                    method: \"personal_sign\",\n                    params: [messageToSign, this.address],\n                },\n                chain: `eip155:${chain.id}`,\n                walletInfo,\n                sessionRequestHandler,\n            });\n        },\n        async signTypedData(_data) {\n            const data = (0,_utils_signatures_helpers_parse_typed_data_js__WEBPACK_IMPORTED_MODULE_10__.parseTypedData)(_data);\n            const { domain, message, primaryType } = data;\n            const types = {\n                EIP712Domain: (0,viem__WEBPACK_IMPORTED_MODULE_11__.getTypesForEIP712Domain)({ domain }),\n                ...data.types,\n            };\n            // Need to do a runtime validation check on addresses, byte ranges, integer ranges, etc\n            // as we can't statically check this with TypeScript.\n            (0,viem__WEBPACK_IMPORTED_MODULE_11__.validateTypedData)({ domain, message, primaryType, types });\n            const typedData = (0,viem__WEBPACK_IMPORTED_MODULE_11__.serializeTypedData)({\n                domain: domain ?? {},\n                message,\n                primaryType,\n                types,\n            });\n            return await requestAndOpenWallet({\n                provider,\n                payload: {\n                    method: \"eth_signTypedData_v4\",\n                    params: [this.address, typedData],\n                },\n                chain: `eip155:${chain.id}`,\n                walletInfo,\n                sessionRequestHandler,\n            });\n        },\n    };\n    return account;\n}\nasync function requestAndOpenWallet(args) {\n    const { provider, payload, chain, walletInfo, sessionRequestHandler } = args;\n    const resultPromise = provider.request(payload, chain);\n    const walletLinkToOpen = provider.session?.peer?.metadata?.redirect?.native ||\n        walletInfo.mobile.native ||\n        walletInfo.mobile.universal;\n    if (sessionRequestHandler && walletLinkToOpen) {\n        await sessionRequestHandler(walletLinkToOpen);\n    }\n    return resultPromise;\n}\nfunction onConnect(address, chain, provider, emitter, storage, client, walletInfo, sessionRequestHandler) {\n    const account = createAccount({\n        address,\n        chain,\n        client,\n        provider,\n        sessionRequestHandler,\n        walletInfo,\n    });\n    async function disconnect() {\n        provider.removeListener(\"accountsChanged\", onAccountsChanged);\n        provider.removeListener(\"chainChanged\", onChainChanged);\n        provider.removeListener(\"disconnect\", onDisconnect);\n        await provider.disconnect();\n        cachedProvider = null;\n    }\n    function onDisconnect() {\n        setRequestedChainsIds([], storage);\n        storage?.removeItem(storageKeys.lastUsedChainId);\n        disconnect();\n        emitter.emit(\"disconnect\", undefined);\n    }\n    function onAccountsChanged(accounts) {\n        if (accounts[0]) {\n            const newAccount = createAccount({\n                address: (0,_utils_address_js__WEBPACK_IMPORTED_MODULE_7__.getAddress)(accounts[0]),\n                chain,\n                client,\n                provider,\n                sessionRequestHandler,\n                walletInfo,\n            });\n            emitter.emit(\"accountChanged\", newAccount);\n            emitter.emit(\"accountsChanged\", accounts);\n        }\n        else {\n            onDisconnect();\n        }\n    }\n    function onChainChanged(newChainId) {\n        const newChain = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain)((0,_utils_normalizeChainId_js__WEBPACK_IMPORTED_MODULE_4__.normalizeChainId)(newChainId));\n        emitter.emit(\"chainChanged\", newChain);\n        storage?.setItem(storageKeys.lastUsedChainId, String(newChainId));\n    }\n    provider.on(\"accountsChanged\", onAccountsChanged);\n    provider.on(\"chainChanged\", onChainChanged);\n    provider.on(\"disconnect\", onDisconnect);\n    provider.on(\"session_delete\", onDisconnect);\n    return [\n        account,\n        chain,\n        disconnect,\n        (newChain) => switchChainWC(provider, newChain),\n    ];\n}\nasync function switchChainWC(provider, chain) {\n    const chainId = chain.id;\n    try {\n        provider.setDefaultChain(`eip155:${chainId}`);\n    }\n    catch (error) {\n        const message = typeof error === \"string\" ? error : error?.message;\n        if (/user rejected request/i.test(message)) {\n            throw new viem__WEBPACK_IMPORTED_MODULE_11__.UserRejectedRequestError(error);\n        }\n        throw new viem__WEBPACK_IMPORTED_MODULE_11__.SwitchChainError(error);\n    }\n}\n/**\n * Set the requested chains to the storage.\n * @internal\n */\nfunction setRequestedChainsIds(chains, storage) {\n    storage?.setItem(storageKeys.requestedChains, (0,_utils_json_js__WEBPACK_IMPORTED_MODULE_12__.stringify)(chains));\n}\nfunction getChainsToRequest(options) {\n    const rpcMap = {};\n    const chainIds = [];\n    if (options.chain) {\n        rpcMap[options.chain.id] = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getRpcUrlForChain)({\n            chain: options.chain,\n            client: options.client,\n        });\n        chainIds.push(options.chain.id);\n    }\n    // limit optional chains to 10\n    const optionalChains = (options?.optionalChains || []).slice(0, 10);\n    for (const chain of optionalChains) {\n        rpcMap[chain.id] = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getRpcUrlForChain)({\n            chain: chain,\n            client: options.client,\n        });\n        chainIds.push(chain.id);\n    }\n    if (!options.chain && optionalChains.length === 0) {\n        rpcMap[1] = (0,_chains_utils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedChain)(1).rpc;\n        chainIds.push(1);\n    }\n    return {\n        chains: chainIds.map((x) => `eip155:${x}`),\n        rpcMap,\n    };\n}\nconst chainsToRequestForSafe = [\n    1, // Ethereum Mainnet\n    11155111, // Sepolia Testnet\n    42161, // Arbitrum One Mainnet\n    43114, // Avalanche Mainnet\n    8453, // Base Mainnet\n    1313161554, // Aurora Mainnet\n    84532, // Base Sepolia Testnet\n    56, // Binance Smart Chain Mainnet\n    42220, // Celo Mainnet\n    100, // Gnosis Mainnet\n    10, // Optimism Mainnet\n    137, // Polygon Mainnet\n    1101, // Polygon zkEVM Mainnet\n    324, // zkSync Era mainnet\n    534352, // Scroll mainnet\n];\n//# sourceMappingURL=controller.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/thirdweb/dist/esm/wallets/wallet-connect/controller.js\n"));

/***/ })

}]);